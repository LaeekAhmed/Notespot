import express from 'express';
import Author from '../models/author.js';
import Book from '../models/book.js';
import { requiresAuth } from 'express-openid-connect';
const router = express.Router(); router.get("/", async (r, e) => { let t = Author.find(); null != r.query.name && "" != r.query.name && (console.log(typeof r.query.name), " " == r.query.name[0] && (r.query.name = r.query.name.substring(1)), t = t.regex("name", new RegExp(r.query.name, "i"))); try { const o = await t.exec(); e.render("authors/index", { authors: o, searchOptions: r.query }) } catch { e.redirect("/") } }), router.get("/new", requiresAuth(), (r, e) => { e.render("authors/new", { author: new Author }) }), router.post("/", async (r, e) => { const t = new Author({ name: r.body.name }); try { const r = await t.save(); console.log("1", t), console.log("2", r), e.redirect(`/authors/${r.id}`) } catch { e.render("authors/new", { author: t, errorMessage: "Error creating Author" }) } }), router.get("/:id", async (r, e) => { try { const t = await Author.findById(r.params.id), o = await Book.find({ author: t.id }); e.render("authors/show", { author: t, booksByAuthor: o }) } catch (r) { console.log(r), e.redirect("/") } }), router.get("/:id/edit", requiresAuth(), async (r, e) => { try { const t = await Author.findById(r.params.id); e.render("authors/edit", { author: t }) } catch { e.redirect("/authors") } }), router.put("/:id", requiresAuth(), async (r, e) => { let t; try { t = await Author.findById(r.params.id), t.name = r.body.name, await t.save(), e.redirect(`${t.id}`) } catch { null == t ? e.redirect("/") : e.render("authors/edit", { author: t, errorMessage: "Error updating Author" }) } }), router.delete("/:id", requiresAuth(), async (r, e) => { const t = await Book.find({ author: r.params.id }); let o; try { o = await Author.findById(r.params.id), await o.remove(), e.redirect("/authors") } catch { null == o ? e.redirect("/") : e.render("authors/show", { author: o, booksByAuthor: t, errorMessage: "Author has Linked books!" }) } }), module.exports = router;